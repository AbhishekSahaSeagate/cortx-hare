# Globals ----------------------------------------------------------------- {{{1
#

variables:
  CENTOS_RELEASE: 7

  # Mero git reference to build and use.
  #
  # If `MERO_COMMIT_REF` is empty or undefined, CI will use rpms from
  # http://ci-storage.mero.colo.seagate.com/releases/eos/BLATEST/
  MERO_COMMIT_REF: ''

  DOCKER_REGISTRY: registry.gitlab.mero.colo.seagate.com
  GIT_DEPTH: 1  # clone only the current commit
  GIT_STRATEGY: clone  # make a fresh `git clone` of the repo for every new CI job
  GIT_SUBMODULE_STRATEGY: normal  # init and check out submodules
  M0_VG_NO_SYMLINKS: "true"

  # rpms will be accessible at http://ci-storage.mero.colo.seagate.com${RPMSYNC_DIR}
  RPMSYNC_DIR: "/releases/dev/$CI_PROJECT_PATH/$CI_COMMIT_REF_SLUG/B$CI_PIPELINE_ID"

  WORKSPACE_DIR:  "/home/gitlab-runner/workspaces/${CI_PROJECT_NAME}${CI_PIPELINE_ID}"
  WORKSPACE_NAME: "${CI_PROJECT_NAME}${CI_PIPELINE_ID}"

stages:
  - build
  - test
  - cleanup

before_script:
  - date -u -Isec
  - git log -1 --pretty=fuller
  - export

after_script:
  - date -u -Isec

# Build ------------------------------------------------------------------- {{{1
#

build:
  stage: build
  tags: [ m0vg ]
  except: [ tags ]
  script: [ ci/build ]

rpmbuild:
  stage: build
  tags: [ docker-build ]
  except: [ tags ]
  image: $DOCKER_REGISTRY/mero/hare:$CENTOS_RELEASE
  script: [ ci/rpmbuild ]
  except:
    variables: [ $MERO_COMMIT_REF ]

# Test ----------------------------------------------------------------- {{{1
#

# See https://docs.gitlab.com/ce/ci/yaml/README.html#anchors
.test_boot_template: &test_boot_definition
  stage: test
  tags: [ m0vg ]
  except: [ tags ]
  variables: { M0VG: m0vg-$CI_JOB_NAME/scripts/m0vg }
  script:
    - errno_file=$WORKSPACE_DIR/hare/ci/_$CI_JOB_NAME.errno
    - rm -f $errno_file
    # `ci/expect-timeout` is only needed for GitLab < 12.3;
    # see https://docs.gitlab.com/ee/ci/yaml/#timeout
    - |
      _timeout=  # max allowed duration of a CI job, in minutes
      case $CI_JOB_NAME in
          test-boot*) _timeout=30;;
          test-pcs)   _timeout=45;;  # test-pcs needs to run longer
          *) echo "Unexpected CI job name: $CI_JOB_NAME" >&2; exit 1;;
      esac
      rc=0
      time ci/expect-timeout $((_timeout * 60)) ci/$CI_JOB_NAME ||
          rc=$?
      ((rc == 0)) || echo $rc >$errno_file
      exit $rc
  after_script:
    - date -u -Isec
    - cd $WORKSPACE_DIR
    - /usr/bin/time hare/ci/collect-artifacts

    # Clean up.  This ensures that VMs are destroyed in case of a manual
    # job restart, when global 'cleanup' stage is not performed.
    - $M0VG destroy -f || true

  artifacts:
    name: "${CI_PROJECT_NAME}_job${CI_JOB_ID}_${CI_JOB_NAME}"
    when: always
    paths:
      - ${CI_JOB_NAME}*consul*.log
      - ${CI_JOB_NAME}*m0reportbug-data.tar.xz
      # - ${CI_JOB_NAME}*m0reportbug-cores.tar.xz  # XXX too big
      - ${CI_JOB_NAME}*m0reportbug-traces.tar.xz
      - ${CI_JOB_NAME}*syslog.txt
      - ${CI_JOB_NAME}*systemctl-status.txt

test-boot1:
  <<: *test_boot_definition

test-boot2:
  <<: *test_boot_definition

.test-pcs:
  <<: *test_boot_definition

.test-utils:
  stage: test
  tags: [ m0vg ]
  except: [ tags ]
  script: [ ci/test-utils ]

# Cleanup ----------------------------------------------------------------- {{{1
#

cleanup:
  stage: cleanup
  tags: [ m0vg ]
  except: [ tags ]
  when: always
  dependencies: []  # empty deps list prevents unneeded artifacts downloading

  variables:
    # If a branch is updated while CI tests for the older commit are still
    # being run, the checkout phase of 'cleanup' job will fail (thus cleanup
    # script will not run) unless GIT_DEPTH is deep enough to include the older
    # commit. Cloning 30 latest commits seems to be good enough - it's quite
    # rare for people to push more than 30 new commits in one go.
    GIT_DEPTH: 30
    GIT_SUBMODULE_STRATEGY: none

  script:
    - cd $WORKSPACE_DIR
    - m0vg-test-boot1/scripts/m0vg destroy -f || true
    - m0vg-test-boot2/scripts/m0vg destroy -f || true
    - m0vg-test-pcs/scripts/m0vg destroy -f || true

# Docker images ----------------------------------------------------------- {{{1
#

docker:rebuild-images:
  stage: build
  tags: [ docker-image-build ]
  when: manual
  except: [ schedules ]

  variables:
    DOCKER_IMAGE_TAG: 7

  script:
    - cd docker/
    - make docker-image-${DOCKER_IMAGE_TAG}
    - make push tag="${DOCKER_IMAGE_TAG}*"


docker:rebuild-images:76:
  extends: docker:rebuild-images
  variables:
    DOCKER_IMAGE_TAG: '7.6'


docker:rebuild-images:eos:
  extends: docker:rebuild-images
  variables:
    DOCKER_IMAGE_TAG: eos

# vim: foldmethod=marker shiftwidth=2 tabstop=2 expandtab
