#!/usr/bin/env python3

# :help: show cluster status

import argparse
import sys
from subprocess import PIPE, Popen
from typing import Any, Dict, List, NamedTuple, Optional, Set

import simplejson as j
from consul import Consul, ConsulException
from requests.exceptions import RequestException
from urllib3.exceptions import HTTPError


class Fid:
    def __init__(self, container: int, key: int):
        self.container = container
        self.key = key

    def __str__(self):
        return f'{self.container:#x}:{self.key:#x}'

    def __repr__(self):
        return f'{self.__class__.__name__}({self.container:#x}, {self.key:#x})'


class FidEncoder(j.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Fid):
            return obj.__repr__()
        return super().default(obj)


Process = NamedTuple('Process', [('name', str), ('fid', Fid), ('ep', str),
                                 ('status', str)])

Host = NamedTuple('Host', [('name', str), ('svcs', List[Process])])


class NoConsulError(RuntimeError):
    pass


def processfid2str(fidk: int) -> str:
    return '{:#x}:{:#x}'.format(ord('r') << 56 | 1, fidk)


def get_kv_throwing(cns: Consul, key: str) -> Any:
    """
    Returns the given value from Consul KV. May throw NoConsulError in
    case of an intermittent connection error or while Consul is re-electing
    internal Raft leader. KeyError will be thrown if no key can be found.
    """
    try:
        kv: Dict[str, Any] = cns.kv.get(key)[1]
        if kv is None:
            raise KeyError(kv)
        return kv['Value']
    except (ConsulException, HTTPError, RequestException) as e:
        raise NoConsulError('Could not access Consul KV')\
            from e


def get_kv(cns: Consul, key: str) -> str:
    kv: Dict[str, bytes] = cns.kv.get(key)[1]
    return kv['Value'].decode() if kv and kv['Value'] is not None else ''


def leader_tag(cns: Consul, host: str) -> str:
    return ' (RC)' if get_kv(cns, 'leader') == host else ''


def profile(cns: Consul) -> str:
    return get_kv(cns, 'm0conf/profiles')


def sns_pools(cns: Consul) -> List[str]:
    return get_kv(cns, 'm0conf/profiles/pools').split(' ')


def hosts(cns: Consul) -> Set[str]:
    data = cns.kv.get('m0conf/nodes', recurse=True)[1]
    host_names = {(x['Key'].split('/'))[2] for x in data}
    return host_names


def get_fs_stats(cns: Consul) -> Optional[Any]:
    try:
        data = get_kv_throwing(cns, 'stats/filesystem')
        return j.loads(data)
    except KeyError:
        return None


def proc_id2name(cns: Consul, node: str, proc_id: int) -> str:
    names = {
        'confd': 'confd',
        'ha': 'hax',
        'ios': 'ioservice',
        'm0_client_s3': 's3server'
    }
    services = cns.kv.get(f'm0conf/nodes/{node}/processes/{proc_id}/services',
                          recurse=True)[1]
    assert services
    for svc in services:
        # key looks like
        # 'm0conf/nodes/{node}/processes/{proc_id}/services/<svc_name>'
        svc_name = svc['Key'].split('/')[-1]
        if svc_name in names:
            return names[svc_name]
    return 'm0_client'


def processes(cns: Consul, node_id: str) -> List[Process]:
    # Get 'm0conf/nodes/<node_id>/processes/<process_fidk>/...' entries
    # from the KV.  See 'Consul KV Schema' in [4/KV](rfc/4/README.md).
    data = cns.kv.get(f'm0conf/nodes/{node_id}/processes', recurse=True)[1]
    fidk_list: List[int] = list({int(x['Key'].split('/')[4]) for x in data})
    fidk_list.sort()
    return [
        Process(name=proc_id2name(cns, node_id, k),
                fid=Fid(0x7200000000000001, k),
                ep=get_kv(cns,
                          f'm0conf/nodes/{node_id}/processes/{k}/endpoint'),
                status=process_status(cns, node_id, k))
        for k in fidk_list
    ]


def process_status(cns: Consul, node_id: str, fidk: int) -> str:
    for check in cns.health.node(node_id)[1]:
        if check['ServiceID'] and fidk == int(check['ServiceID']):
            return 'started' if check['Status'] == 'passing' else 'offline'
    return 'unknown'


def cluster_online() -> bool:
    cmd = ['pgrep', '--full', '/opt/seagate/eos/hare/bin/hax']
    process = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, encoding='utf8')
    out, err = process.communicate()
    exit_code = process.returncode
    return exit_code == 0


def get_cluster_status(cns: Consul) -> Dict[str, Any]:
    nodes = [(Host(name=h, svcs=processes(cns, h)))._asdict()
             for h in hosts(cns)]
    return {
        'profile': profile(cns),
        'pools': [x for x in sns_pools(cns)],
        'filesystem': get_fs_stats(cns),
        'nodes': nodes
    }


def parse_opts(argv):
    p = argparse.ArgumentParser(description='Show cluster status.',
                                usage='%(prog)s [OPTION]')
    p.add_argument('--json',
                   help='show output in JSON format',
                   action='store_true')
    return p.parse_args(argv)


def main(argv=None):
    opts = parse_opts(argv)
    cns = Consul()
    if not cluster_online():
        print('Cluster is not running.', file=sys.stderr)
        return 1

    if opts.json:
        status = get_cluster_status(cns)
        print(j.dumps(status, indent=2, cls=FidEncoder))
        return 0

    print('Profile: ' + profile(cns))
    print('Data Pools:')
    for x in sns_pools(cns):
        print(f'    {x}')
    print('Services:')
    for h in hosts(cns):
        print(f'    {h} {leader_tag(cns, h)}')
        for p in processes(cns, h):
            fid: str = f'{p.fid}'
            print(f'    [{p.status:<10}] {p.name:<20}\
 {fid:<30} {p.ep:<30}')


if __name__ == '__main__':
    try:
        sys.exit(main())
    except (ConsulException, NoConsulError) as err:
        sys.exit(f'Consul Error: {err}')
